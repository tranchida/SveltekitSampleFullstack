
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Comments` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Comments
 * 
 */
export type CommentsModel = runtime.Types.Result.DefaultSelection<Prisma.$CommentsPayload>

export type AggregateComments = {
  _count: CommentsCountAggregateOutputType | null
  _avg: CommentsAvgAggregateOutputType | null
  _sum: CommentsSumAggregateOutputType | null
  _min: CommentsMinAggregateOutputType | null
  _max: CommentsMaxAggregateOutputType | null
}

export type CommentsAvgAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type CommentsSumAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type CommentsMinAggregateOutputType = {
  id: number | null
  comment: string | null
  userId: number | null
}

export type CommentsMaxAggregateOutputType = {
  id: number | null
  comment: string | null
  userId: number | null
}

export type CommentsCountAggregateOutputType = {
  id: number
  comment: number
  userId: number
  _all: number
}


export type CommentsAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type CommentsSumAggregateInputType = {
  id?: true
  userId?: true
}

export type CommentsMinAggregateInputType = {
  id?: true
  comment?: true
  userId?: true
}

export type CommentsMaxAggregateInputType = {
  id?: true
  comment?: true
  userId?: true
}

export type CommentsCountAggregateInputType = {
  id?: true
  comment?: true
  userId?: true
  _all?: true
}

export type CommentsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Comments to aggregate.
   */
  where?: Prisma.CommentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Comments to fetch.
   */
  orderBy?: Prisma.CommentsOrderByWithRelationInput | Prisma.CommentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CommentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Comments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Comments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Comments
  **/
  _count?: true | CommentsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CommentsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CommentsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CommentsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CommentsMaxAggregateInputType
}

export type GetCommentsAggregateType<T extends CommentsAggregateArgs> = {
      [P in keyof T & keyof AggregateComments]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateComments[P]>
    : Prisma.GetScalarType<T[P], AggregateComments[P]>
}




export type CommentsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CommentsWhereInput
  orderBy?: Prisma.CommentsOrderByWithAggregationInput | Prisma.CommentsOrderByWithAggregationInput[]
  by: Prisma.CommentsScalarFieldEnum[] | Prisma.CommentsScalarFieldEnum
  having?: Prisma.CommentsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CommentsCountAggregateInputType | true
  _avg?: CommentsAvgAggregateInputType
  _sum?: CommentsSumAggregateInputType
  _min?: CommentsMinAggregateInputType
  _max?: CommentsMaxAggregateInputType
}

export type CommentsGroupByOutputType = {
  id: number
  comment: string
  userId: number
  _count: CommentsCountAggregateOutputType | null
  _avg: CommentsAvgAggregateOutputType | null
  _sum: CommentsSumAggregateOutputType | null
  _min: CommentsMinAggregateOutputType | null
  _max: CommentsMaxAggregateOutputType | null
}

type GetCommentsGroupByPayload<T extends CommentsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CommentsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CommentsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CommentsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CommentsGroupByOutputType[P]>
      }
    >
  > 



export type CommentsWhereInput = {
  AND?: Prisma.CommentsWhereInput | Prisma.CommentsWhereInput[]
  OR?: Prisma.CommentsWhereInput[]
  NOT?: Prisma.CommentsWhereInput | Prisma.CommentsWhereInput[]
  id?: Prisma.IntFilter<"Comments"> | number
  comment?: Prisma.StringFilter<"Comments"> | string
  userId?: Prisma.IntFilter<"Comments"> | number
  user?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.UsersWhereInput>
}

export type CommentsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UsersOrderByWithRelationInput
}

export type CommentsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.CommentsWhereInput | Prisma.CommentsWhereInput[]
  OR?: Prisma.CommentsWhereInput[]
  NOT?: Prisma.CommentsWhereInput | Prisma.CommentsWhereInput[]
  comment?: Prisma.StringFilter<"Comments"> | string
  userId?: Prisma.IntFilter<"Comments"> | number
  user?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.UsersWhereInput>
}, "id">

export type CommentsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.CommentsCountOrderByAggregateInput
  _avg?: Prisma.CommentsAvgOrderByAggregateInput
  _max?: Prisma.CommentsMaxOrderByAggregateInput
  _min?: Prisma.CommentsMinOrderByAggregateInput
  _sum?: Prisma.CommentsSumOrderByAggregateInput
}

export type CommentsScalarWhereWithAggregatesInput = {
  AND?: Prisma.CommentsScalarWhereWithAggregatesInput | Prisma.CommentsScalarWhereWithAggregatesInput[]
  OR?: Prisma.CommentsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CommentsScalarWhereWithAggregatesInput | Prisma.CommentsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Comments"> | number
  comment?: Prisma.StringWithAggregatesFilter<"Comments"> | string
  userId?: Prisma.IntWithAggregatesFilter<"Comments"> | number
}

export type CommentsCreateInput = {
  comment: string
  user: Prisma.UsersCreateNestedOneWithoutCommentsInput
}

export type CommentsUncheckedCreateInput = {
  id?: number
  comment: string
  userId: number
}

export type CommentsUpdateInput = {
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.UsersUpdateOneRequiredWithoutCommentsNestedInput
}

export type CommentsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type CommentsCreateManyInput = {
  id?: number
  comment: string
  userId: number
}

export type CommentsUpdateManyMutationInput = {
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CommentsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type CommentsListRelationFilter = {
  every?: Prisma.CommentsWhereInput
  some?: Prisma.CommentsWhereInput
  none?: Prisma.CommentsWhereInput
}

export type CommentsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CommentsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type CommentsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type CommentsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type CommentsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type CommentsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type CommentsCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CommentsCreateWithoutUserInput, Prisma.CommentsUncheckedCreateWithoutUserInput> | Prisma.CommentsCreateWithoutUserInput[] | Prisma.CommentsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CommentsCreateOrConnectWithoutUserInput | Prisma.CommentsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CommentsCreateManyUserInputEnvelope
  connect?: Prisma.CommentsWhereUniqueInput | Prisma.CommentsWhereUniqueInput[]
}

export type CommentsUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CommentsCreateWithoutUserInput, Prisma.CommentsUncheckedCreateWithoutUserInput> | Prisma.CommentsCreateWithoutUserInput[] | Prisma.CommentsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CommentsCreateOrConnectWithoutUserInput | Prisma.CommentsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CommentsCreateManyUserInputEnvelope
  connect?: Prisma.CommentsWhereUniqueInput | Prisma.CommentsWhereUniqueInput[]
}

export type CommentsUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CommentsCreateWithoutUserInput, Prisma.CommentsUncheckedCreateWithoutUserInput> | Prisma.CommentsCreateWithoutUserInput[] | Prisma.CommentsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CommentsCreateOrConnectWithoutUserInput | Prisma.CommentsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CommentsUpsertWithWhereUniqueWithoutUserInput | Prisma.CommentsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CommentsCreateManyUserInputEnvelope
  set?: Prisma.CommentsWhereUniqueInput | Prisma.CommentsWhereUniqueInput[]
  disconnect?: Prisma.CommentsWhereUniqueInput | Prisma.CommentsWhereUniqueInput[]
  delete?: Prisma.CommentsWhereUniqueInput | Prisma.CommentsWhereUniqueInput[]
  connect?: Prisma.CommentsWhereUniqueInput | Prisma.CommentsWhereUniqueInput[]
  update?: Prisma.CommentsUpdateWithWhereUniqueWithoutUserInput | Prisma.CommentsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CommentsUpdateManyWithWhereWithoutUserInput | Prisma.CommentsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CommentsScalarWhereInput | Prisma.CommentsScalarWhereInput[]
}

export type CommentsUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CommentsCreateWithoutUserInput, Prisma.CommentsUncheckedCreateWithoutUserInput> | Prisma.CommentsCreateWithoutUserInput[] | Prisma.CommentsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CommentsCreateOrConnectWithoutUserInput | Prisma.CommentsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CommentsUpsertWithWhereUniqueWithoutUserInput | Prisma.CommentsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CommentsCreateManyUserInputEnvelope
  set?: Prisma.CommentsWhereUniqueInput | Prisma.CommentsWhereUniqueInput[]
  disconnect?: Prisma.CommentsWhereUniqueInput | Prisma.CommentsWhereUniqueInput[]
  delete?: Prisma.CommentsWhereUniqueInput | Prisma.CommentsWhereUniqueInput[]
  connect?: Prisma.CommentsWhereUniqueInput | Prisma.CommentsWhereUniqueInput[]
  update?: Prisma.CommentsUpdateWithWhereUniqueWithoutUserInput | Prisma.CommentsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CommentsUpdateManyWithWhereWithoutUserInput | Prisma.CommentsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CommentsScalarWhereInput | Prisma.CommentsScalarWhereInput[]
}

export type CommentsCreateWithoutUserInput = {
  comment: string
}

export type CommentsUncheckedCreateWithoutUserInput = {
  id?: number
  comment: string
}

export type CommentsCreateOrConnectWithoutUserInput = {
  where: Prisma.CommentsWhereUniqueInput
  create: Prisma.XOR<Prisma.CommentsCreateWithoutUserInput, Prisma.CommentsUncheckedCreateWithoutUserInput>
}

export type CommentsCreateManyUserInputEnvelope = {
  data: Prisma.CommentsCreateManyUserInput | Prisma.CommentsCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type CommentsUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.CommentsWhereUniqueInput
  update: Prisma.XOR<Prisma.CommentsUpdateWithoutUserInput, Prisma.CommentsUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.CommentsCreateWithoutUserInput, Prisma.CommentsUncheckedCreateWithoutUserInput>
}

export type CommentsUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.CommentsWhereUniqueInput
  data: Prisma.XOR<Prisma.CommentsUpdateWithoutUserInput, Prisma.CommentsUncheckedUpdateWithoutUserInput>
}

export type CommentsUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.CommentsScalarWhereInput
  data: Prisma.XOR<Prisma.CommentsUpdateManyMutationInput, Prisma.CommentsUncheckedUpdateManyWithoutUserInput>
}

export type CommentsScalarWhereInput = {
  AND?: Prisma.CommentsScalarWhereInput | Prisma.CommentsScalarWhereInput[]
  OR?: Prisma.CommentsScalarWhereInput[]
  NOT?: Prisma.CommentsScalarWhereInput | Prisma.CommentsScalarWhereInput[]
  id?: Prisma.IntFilter<"Comments"> | number
  comment?: Prisma.StringFilter<"Comments"> | string
  userId?: Prisma.IntFilter<"Comments"> | number
}

export type CommentsCreateManyUserInput = {
  id?: number
  comment: string
}

export type CommentsUpdateWithoutUserInput = {
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CommentsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CommentsUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}



export type CommentsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  comment?: boolean
  userId?: boolean
  user?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["comments"]>

export type CommentsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  comment?: boolean
  userId?: boolean
  user?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["comments"]>

export type CommentsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  comment?: boolean
  userId?: boolean
  user?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["comments"]>

export type CommentsSelectScalar = {
  id?: boolean
  comment?: boolean
  userId?: boolean
}

export type CommentsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "comment" | "userId", ExtArgs["result"]["comments"]>
export type CommentsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
}
export type CommentsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
}
export type CommentsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
}

export type $CommentsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Comments"
  objects: {
    user: Prisma.$UsersPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    comment: string
    userId: number
  }, ExtArgs["result"]["comments"]>
  composites: {}
}

export type CommentsGetPayload<S extends boolean | null | undefined | CommentsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CommentsPayload, S>

export type CommentsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CommentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CommentsCountAggregateInputType | true
  }

export interface CommentsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comments'], meta: { name: 'Comments' } }
  /**
   * Find zero or one Comments that matches the filter.
   * @param {CommentsFindUniqueArgs} args - Arguments to find a Comments
   * @example
   * // Get one Comments
   * const comments = await prisma.comments.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CommentsFindUniqueArgs>(args: Prisma.SelectSubset<T, CommentsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CommentsClient<runtime.Types.Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Comments that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CommentsFindUniqueOrThrowArgs} args - Arguments to find a Comments
   * @example
   * // Get one Comments
   * const comments = await prisma.comments.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CommentsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CommentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CommentsClient<runtime.Types.Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Comments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentsFindFirstArgs} args - Arguments to find a Comments
   * @example
   * // Get one Comments
   * const comments = await prisma.comments.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CommentsFindFirstArgs>(args?: Prisma.SelectSubset<T, CommentsFindFirstArgs<ExtArgs>>): Prisma.Prisma__CommentsClient<runtime.Types.Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Comments that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentsFindFirstOrThrowArgs} args - Arguments to find a Comments
   * @example
   * // Get one Comments
   * const comments = await prisma.comments.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CommentsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CommentsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CommentsClient<runtime.Types.Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Comments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Comments
   * const comments = await prisma.comments.findMany()
   * 
   * // Get first 10 Comments
   * const comments = await prisma.comments.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const commentsWithIdOnly = await prisma.comments.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CommentsFindManyArgs>(args?: Prisma.SelectSubset<T, CommentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Comments.
   * @param {CommentsCreateArgs} args - Arguments to create a Comments.
   * @example
   * // Create one Comments
   * const Comments = await prisma.comments.create({
   *   data: {
   *     // ... data to create a Comments
   *   }
   * })
   * 
   */
  create<T extends CommentsCreateArgs>(args: Prisma.SelectSubset<T, CommentsCreateArgs<ExtArgs>>): Prisma.Prisma__CommentsClient<runtime.Types.Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Comments.
   * @param {CommentsCreateManyArgs} args - Arguments to create many Comments.
   * @example
   * // Create many Comments
   * const comments = await prisma.comments.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CommentsCreateManyArgs>(args?: Prisma.SelectSubset<T, CommentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Comments and returns the data saved in the database.
   * @param {CommentsCreateManyAndReturnArgs} args - Arguments to create many Comments.
   * @example
   * // Create many Comments
   * const comments = await prisma.comments.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Comments and only return the `id`
   * const commentsWithIdOnly = await prisma.comments.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CommentsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CommentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Comments.
   * @param {CommentsDeleteArgs} args - Arguments to delete one Comments.
   * @example
   * // Delete one Comments
   * const Comments = await prisma.comments.delete({
   *   where: {
   *     // ... filter to delete one Comments
   *   }
   * })
   * 
   */
  delete<T extends CommentsDeleteArgs>(args: Prisma.SelectSubset<T, CommentsDeleteArgs<ExtArgs>>): Prisma.Prisma__CommentsClient<runtime.Types.Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Comments.
   * @param {CommentsUpdateArgs} args - Arguments to update one Comments.
   * @example
   * // Update one Comments
   * const comments = await prisma.comments.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CommentsUpdateArgs>(args: Prisma.SelectSubset<T, CommentsUpdateArgs<ExtArgs>>): Prisma.Prisma__CommentsClient<runtime.Types.Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Comments.
   * @param {CommentsDeleteManyArgs} args - Arguments to filter Comments to delete.
   * @example
   * // Delete a few Comments
   * const { count } = await prisma.comments.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CommentsDeleteManyArgs>(args?: Prisma.SelectSubset<T, CommentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Comments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Comments
   * const comments = await prisma.comments.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CommentsUpdateManyArgs>(args: Prisma.SelectSubset<T, CommentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Comments and returns the data updated in the database.
   * @param {CommentsUpdateManyAndReturnArgs} args - Arguments to update many Comments.
   * @example
   * // Update many Comments
   * const comments = await prisma.comments.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Comments and only return the `id`
   * const commentsWithIdOnly = await prisma.comments.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CommentsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CommentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Comments.
   * @param {CommentsUpsertArgs} args - Arguments to update or create a Comments.
   * @example
   * // Update or create a Comments
   * const comments = await prisma.comments.upsert({
   *   create: {
   *     // ... data to create a Comments
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Comments we want to update
   *   }
   * })
   */
  upsert<T extends CommentsUpsertArgs>(args: Prisma.SelectSubset<T, CommentsUpsertArgs<ExtArgs>>): Prisma.Prisma__CommentsClient<runtime.Types.Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Comments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentsCountArgs} args - Arguments to filter Comments to count.
   * @example
   * // Count the number of Comments
   * const count = await prisma.comments.count({
   *   where: {
   *     // ... the filter for the Comments we want to count
   *   }
   * })
  **/
  count<T extends CommentsCountArgs>(
    args?: Prisma.Subset<T, CommentsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CommentsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Comments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CommentsAggregateArgs>(args: Prisma.Subset<T, CommentsAggregateArgs>): Prisma.PrismaPromise<GetCommentsAggregateType<T>>

  /**
   * Group by Comments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CommentsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CommentsGroupByArgs['orderBy'] }
      : { orderBy?: CommentsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CommentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Comments model
 */
readonly fields: CommentsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Comments.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CommentsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UsersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UsersDefaultArgs<ExtArgs>>): Prisma.Prisma__UsersClient<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Comments model
 */
export interface CommentsFieldRefs {
  readonly id: Prisma.FieldRef<"Comments", 'Int'>
  readonly comment: Prisma.FieldRef<"Comments", 'String'>
  readonly userId: Prisma.FieldRef<"Comments", 'Int'>
}
    

// Custom InputTypes
/**
 * Comments findUnique
 */
export type CommentsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comments
   */
  select?: Prisma.CommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comments
   */
  omit?: Prisma.CommentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentsInclude<ExtArgs> | null
  /**
   * Filter, which Comments to fetch.
   */
  where: Prisma.CommentsWhereUniqueInput
}

/**
 * Comments findUniqueOrThrow
 */
export type CommentsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comments
   */
  select?: Prisma.CommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comments
   */
  omit?: Prisma.CommentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentsInclude<ExtArgs> | null
  /**
   * Filter, which Comments to fetch.
   */
  where: Prisma.CommentsWhereUniqueInput
}

/**
 * Comments findFirst
 */
export type CommentsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comments
   */
  select?: Prisma.CommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comments
   */
  omit?: Prisma.CommentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentsInclude<ExtArgs> | null
  /**
   * Filter, which Comments to fetch.
   */
  where?: Prisma.CommentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Comments to fetch.
   */
  orderBy?: Prisma.CommentsOrderByWithRelationInput | Prisma.CommentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Comments.
   */
  cursor?: Prisma.CommentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Comments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Comments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Comments.
   */
  distinct?: Prisma.CommentsScalarFieldEnum | Prisma.CommentsScalarFieldEnum[]
}

/**
 * Comments findFirstOrThrow
 */
export type CommentsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comments
   */
  select?: Prisma.CommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comments
   */
  omit?: Prisma.CommentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentsInclude<ExtArgs> | null
  /**
   * Filter, which Comments to fetch.
   */
  where?: Prisma.CommentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Comments to fetch.
   */
  orderBy?: Prisma.CommentsOrderByWithRelationInput | Prisma.CommentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Comments.
   */
  cursor?: Prisma.CommentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Comments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Comments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Comments.
   */
  distinct?: Prisma.CommentsScalarFieldEnum | Prisma.CommentsScalarFieldEnum[]
}

/**
 * Comments findMany
 */
export type CommentsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comments
   */
  select?: Prisma.CommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comments
   */
  omit?: Prisma.CommentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentsInclude<ExtArgs> | null
  /**
   * Filter, which Comments to fetch.
   */
  where?: Prisma.CommentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Comments to fetch.
   */
  orderBy?: Prisma.CommentsOrderByWithRelationInput | Prisma.CommentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Comments.
   */
  cursor?: Prisma.CommentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Comments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Comments.
   */
  skip?: number
  distinct?: Prisma.CommentsScalarFieldEnum | Prisma.CommentsScalarFieldEnum[]
}

/**
 * Comments create
 */
export type CommentsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comments
   */
  select?: Prisma.CommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comments
   */
  omit?: Prisma.CommentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentsInclude<ExtArgs> | null
  /**
   * The data needed to create a Comments.
   */
  data: Prisma.XOR<Prisma.CommentsCreateInput, Prisma.CommentsUncheckedCreateInput>
}

/**
 * Comments createMany
 */
export type CommentsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Comments.
   */
  data: Prisma.CommentsCreateManyInput | Prisma.CommentsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Comments createManyAndReturn
 */
export type CommentsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comments
   */
  select?: Prisma.CommentsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Comments
   */
  omit?: Prisma.CommentsOmit<ExtArgs> | null
  /**
   * The data used to create many Comments.
   */
  data: Prisma.CommentsCreateManyInput | Prisma.CommentsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Comments update
 */
export type CommentsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comments
   */
  select?: Prisma.CommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comments
   */
  omit?: Prisma.CommentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentsInclude<ExtArgs> | null
  /**
   * The data needed to update a Comments.
   */
  data: Prisma.XOR<Prisma.CommentsUpdateInput, Prisma.CommentsUncheckedUpdateInput>
  /**
   * Choose, which Comments to update.
   */
  where: Prisma.CommentsWhereUniqueInput
}

/**
 * Comments updateMany
 */
export type CommentsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Comments.
   */
  data: Prisma.XOR<Prisma.CommentsUpdateManyMutationInput, Prisma.CommentsUncheckedUpdateManyInput>
  /**
   * Filter which Comments to update
   */
  where?: Prisma.CommentsWhereInput
  /**
   * Limit how many Comments to update.
   */
  limit?: number
}

/**
 * Comments updateManyAndReturn
 */
export type CommentsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comments
   */
  select?: Prisma.CommentsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Comments
   */
  omit?: Prisma.CommentsOmit<ExtArgs> | null
  /**
   * The data used to update Comments.
   */
  data: Prisma.XOR<Prisma.CommentsUpdateManyMutationInput, Prisma.CommentsUncheckedUpdateManyInput>
  /**
   * Filter which Comments to update
   */
  where?: Prisma.CommentsWhereInput
  /**
   * Limit how many Comments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Comments upsert
 */
export type CommentsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comments
   */
  select?: Prisma.CommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comments
   */
  omit?: Prisma.CommentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentsInclude<ExtArgs> | null
  /**
   * The filter to search for the Comments to update in case it exists.
   */
  where: Prisma.CommentsWhereUniqueInput
  /**
   * In case the Comments found by the `where` argument doesn't exist, create a new Comments with this data.
   */
  create: Prisma.XOR<Prisma.CommentsCreateInput, Prisma.CommentsUncheckedCreateInput>
  /**
   * In case the Comments was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CommentsUpdateInput, Prisma.CommentsUncheckedUpdateInput>
}

/**
 * Comments delete
 */
export type CommentsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comments
   */
  select?: Prisma.CommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comments
   */
  omit?: Prisma.CommentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentsInclude<ExtArgs> | null
  /**
   * Filter which Comments to delete.
   */
  where: Prisma.CommentsWhereUniqueInput
}

/**
 * Comments deleteMany
 */
export type CommentsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Comments to delete
   */
  where?: Prisma.CommentsWhereInput
  /**
   * Limit how many Comments to delete.
   */
  limit?: number
}

/**
 * Comments without action
 */
export type CommentsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comments
   */
  select?: Prisma.CommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comments
   */
  omit?: Prisma.CommentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentsInclude<ExtArgs> | null
}
